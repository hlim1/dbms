/*
 * sorted_page.C - implementation of class SortedPage
 *
 * Johannes Gehrke & Gideon Glass  951016  CS564  UW-Madison
 * Edited by Young-K. Suh (yksuh@cs.arizona.edu) 03/27/14 CS560 Database Systems Implementation 
 */

#include "sorted_page.h"
#include "btindex_page.h"
#include "btleaf_page.h"

const char* SortedPage::Errors[SortedPage::NR_ERRORS] = {
	"OK",
	"Insert Record Failed (SortedPage::insertRecord)",
	"Delete Record Failed (SortedPage::deleteRecord)",
	"NOT attrString or attrInteger",
};

static error_string_table hfTable( SORTEDPAGE, SortedPage::Errors );


/*
 *  Status SortedPage::insertRecord(AttrType key_type, 
 *                                  char *recPtr,
 *                                    int recLen, RID& rid)
 *
 * Performs a sorted insertion of a record on an record page. The records are
 * sorted in increasing key order.
 * Only the  slot  directory is  rearranged.  The  data records remain in
 * the same positions on the  page.
 *  Parameters:
 *    o key is a void * pointer to a key.
 * 
 *    o key_type - the type of the key.
 *    o recPtr points to the actual record that will be placed on the page
 *            (So, recPtr is the combination of the key and the other data
 *       value(s)).
 *    o recLen is the length of the record to be inserted.
 *    o rid is the record id of the record inserted.
 */

//---- insertRecord method will hide the base method ---
Status SortedPage::insertRecord (AttrType key_type,
		char * recPtr,
		int recLen,
		RID& rid)
{
	// put your code here
	//--- check key_type ---
	if(key_type != attrString && key_type != attrInteger)
		return MINIBASE_FIRST_ERROR(SORTEDPAGE, KEY_TYPE_ERROR);

	//---1. call base insertRecord func to insert record ---
	Status status = HFPage::insertRecord(recPtr, recLen, rid);

	//--- check whether insert is good ---
	if(status != OK)
		return MINIBASE_RESULTING_ERROR(SORTEDPAGE, status, INSERT_REC_FAILED);

	//---2. rearrange the slot dir ---

	//--- 2.1 ?? get the key value ---
	//--- accoridng to key_type to retrieve key value ---
	Keytype key;
	int keyLen = 0;
	if(key_type == attrInteger)
	{
		void* keyMem = calloc(1, sizeof(int));
		memcpy(keyMem, recPtr, sizeof(int));
		
		key.intkey = (int)*keyMem;
		free(keyMem);
	}
	else if(key_type == attrString)
	{
		void* keyMemRe = calloc(1, sizeof(MAX_KEY_SIZE1));
		memcpy(keyMemRe, recPtr, sizeof(MAX_KEY_SIZE1));
	    memcpy(key.charkey, keyMemRe, strlen((char* )keyMemRe));
		free(keyMemRe);
	}

	//--- 2.2 rearrange slot dir including the new slot ---
	//--- & change rid value ---
	
	for(int i = 0; i < this->slotCnt; i++)
	{
		
	}

	return OK;
}


/*
 * Status SortedPage::deleteRecord (const RID& rid)
 *
 * Deletes a record from a sorted record page. It just calls
 * HFPage::deleteRecord().
 */

Status SortedPage::deleteRecord (const RID& rid)
{
  // put your code here
  return OK;
}

int SortedPage::numberOfRecords()
{
  // put your code here
  return 0;
}
